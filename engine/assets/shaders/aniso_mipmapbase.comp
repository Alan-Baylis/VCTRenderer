#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, rgba8) uniform readonly image3D voxelAlbedo;
layout(binding = 1, rgba8) uniform writeonly image3D voxelMipmap;

vec4[8] fetchTexels(ivec3 pos) 
{
	// look up texels
	return vec4[8] 
	(
		imageLoad(voxelAlbedo, pos + ivec3(1, 1, 1)), 
		imageLoad(voxelAlbedo, pos + ivec3(1, 1, 0)), 
		imageLoad(voxelAlbedo, pos + ivec3(1, 0, 1)), 
		imageLoad(voxelAlbedo, pos + ivec3(1, 0, 0)), 
		imageLoad(voxelAlbedo, pos + ivec3(0, 1, 1)), 
		imageLoad(voxelAlbedo, pos + ivec3(0, 1, 0)), 
		imageLoad(voxelAlbedo, pos + ivec3(0, 0, 1)), 
		imageLoad(voxelAlbedo, pos + ivec3(0, 0, 0))
	);
}

void main()
{
	uvec3 volumeDimension = imageSize(voxelMipmap);
	volumeDimension.x = volumeDimension.x / 6;
	int mipDimension = int(volumeDimension.z);

	if(gl_GlobalInvocationID.x >= mipDimension ||
		gl_GlobalInvocationID.y >= mipDimension ||
		gl_GlobalInvocationID.z >= mipDimension) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);
	ivec3 sourcePos = writePos * 2;

	vec4 values[8] = fetchTexels(sourcePos);
	// x +
	imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[4] * (1 - values[0].a) + 
		values[1] + values[5] * (1 - values[1].a) +
		values[2] + values[6] * (1 - values[2].a) +
		values[3] + values[7] * (1 - values[3].a)) / 4
	);
	// x -
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[4] + values[0] * (1 - values[4].a) +
    	values[5] + values[1] * (1 - values[5].a) +
    	values[6] + values[2] * (1 - values[6].a) +
    	values[7] + values[3] * (1 - values[7].a)) / 4
    );
	// y +
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[2] * (1 - values[0].a) +
    	values[1] + values[3] * (1 - values[1].a) +
    	values[5] + values[7] * (1 - values[5].a) +
    	values[4] + values[6] * (1 - values[4].a)) / 4
    );
	// y -
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[2] + values[0] * (1 - values[2].a) +
    	values[3] + values[1] * (1 - values[3].a) +
    	values[7] + values[5] * (1 - values[7].a) +
    	values[6] + values[4] * (1 - values[6].a)) / 4
    );
	// z +
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[1] * (1 - values[0].a) +
    	values[2] + values[3] * (1 - values[2].a) +
    	values[4] + values[5] * (1 - values[4].a) +
    	values[6] + values[7] * (1 - values[6].a)) / 4
    );
	// z -
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[1] + values[0] * (1 - values[1].a) +
    	values[3] + values[2] * (1 - values[3].a) +
    	values[5] + values[4] * (1 - values[5].a) +
    	values[7] + values[6] * (1 - values[7].a)) / 4
    );
}