#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, rgba8) uniform sampler3D voxelAlbedo;
layout(binding = 1, rgba8) uniform writeonly image3D voxelMipmap;

bool FetchTexels(ivec3 pos, out vec4[8] values) 
{
	int counter = 0;
	int invalid = 0;

	for(int x = 0; x < 2; x++)
	{
		for(int y = 0; y < 2; y++)
		{
			for(int z = 0; z < 2; z++)
			{
				vec4 value = texelFetch(voxelAlbedo, pos + ivec3(1 - x, 1 - y, 1 - z), 0);

				if(value.a == 0) invalid++;

				values[counter++] = value;
			}
		}
	}

	return invalid != counter;
}

void main()
{
	int mipDimension = int(imageSize(voxelMipmap).z);

	if(gl_GlobalInvocationID.x >= mipDimension ||
		gl_GlobalInvocationID.y >= mipDimension ||
		gl_GlobalInvocationID.z >= mipDimension) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);
	ivec3 sourcePos = writePos * 2;

	vec4 values[8];
	
	if(!FetchTexels(sourcePos, values)) { return; }
	// x -
	imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[4] * (1 - values[0].a) + 
		values[1] + values[5] * (1 - values[1].a) +
		values[2] + values[6] * (1 - values[2].a) +
		values[3] + values[7] * (1 - values[3].a)) * 0.25f
	);
	// x +
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[4] + values[0] * (1 - values[4].a) +
    	values[5] + values[1] * (1 - values[5].a) +
    	values[6] + values[2] * (1 - values[6].a) +
    	values[7] + values[3] * (1 - values[7].a)) * 0.25f
    );
	// y -
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[2] * (1 - values[0].a) +
    	values[1] + values[3] * (1 - values[1].a) +
    	values[5] + values[7] * (1 - values[5].a) +
    	values[4] + values[6] * (1 - values[4].a)) * 0.25f
    );
	// y +
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[2] + values[0] * (1 - values[2].a) +
    	values[3] + values[1] * (1 - values[3].a) +
    	values[7] + values[5] * (1 - values[7].a) +
    	values[6] + values[4] * (1 - values[6].a)) * 0.25f
    );
	// z -
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[0] + values[1] * (1 - values[0].a) +
    	values[2] + values[3] * (1 - values[2].a) +
    	values[4] + values[5] * (1 - values[4].a) +
    	values[6] + values[7] * (1 - values[6].a)) * 0.25f
    );
	// z +
	writePos.x += mipDimension;
    imageStore(voxelMipmap, writePos, 
	(
		values[1] + values[0] * (1 - values[1].a) +
    	values[3] + values[2] * (1 - values[3].a) +
    	values[5] + values[4] * (1 - values[5].a) +
    	values[7] + values[6] * (1 - values[7].a)) * 0.25f
    );
}