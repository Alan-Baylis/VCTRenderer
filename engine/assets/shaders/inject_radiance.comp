#version 450
#extension GL_ARB_shader_image_load_store : require

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, rgba8) uniform image3D voxelAlbedo;
layout(binding = 1, rgba8) uniform image3D voxelNormal;
layout(binding = 2, rgba8) uniform writeonly image3D voxelRadiance;

const uint MAX_DIRECTIONAL_LIGHTS = 8;
const uint MAX_POINT_LIGHTS = 256;
const uint MAX_SPOT_LIGHTS = 256;

struct Attenuation
{
    float constant;
    float linear;
    float quadratic;
};

struct Light {
    float angleInnerCone;
    float angleOuterCone;
    vec3 diffuse;
    vec3 position;
    vec3 direction;
    Attenuation attenuation;
};

uniform Light directionalLight[MAX_DIRECTIONAL_LIGHTS];
uniform Light pointLight[MAX_POINT_LIGHTS];
uniform Light spotLight[MAX_SPOT_LIGHTS];
uniform uint lightTypeCount[3];

uniform vec2 exponents;
uniform float lightBleedingReduction;
uniform mat4 lightViewProjection;
uniform float voxelSize;
uniform vec3 worldMinPoint;

uniform sampler2D shadowMap;
uniform uint shadowMapping = 1;
uniform uint writingLowerMip = 0;

float linstep(float low, float high, float value)
{
    return clamp((value - low) / (high - low), 0.0f, 1.0f);
}  

float ReduceLightBleeding(float pMax, float Amount)  
{  
    return linstep(Amount, 1, pMax);  
} 

vec2 WarpDepth(float depth)
{
    depth = 2.0f * depth - 1.0f;
    float pos = exp(exponents.x * depth);
    float neg = -exp(-exponents.y * depth);
    return vec2(pos, neg);
}

float Chebyshev(vec2 moments, float mean, float minVariance)
{
    if(mean <= moments.x)
    {
        return 1.0f;
    }
    else
    {
        float variance = moments.y - (moments.x * moments.x);
        variance = max(variance, minVariance);
        float d = mean - moments.x;
        float lit = variance / (variance + (d * d));
        return ReduceLightBleeding(lit, lightBleedingReduction);
    }
}

float Visibility(vec3 position)
{
    vec4 lsPos = lightViewProjection * vec4(position, 1.0f);
    // avoid arithmetic error
    if(lsPos.w == 0.0f) return 1.0f;
    // transform to ndc-space
    lsPos /= lsPos.w;
    // querry visibility
    vec4 moments = texture(shadowMap, lsPos.xy).xyzw;
    // move to avoid acne
    vec2 wDepth = WarpDepth(lsPos.z - 0.0001f);
    // derivative of warping at depth
    vec2 depthScale = 0.0002f * exponents * wDepth;
    vec2 minVariance = depthScale * depthScale;
    // evsm mode 4 compares negative and positive
    float positive = Chebyshev(moments.xz, wDepth.x, minVariance.x);
    float negative = Chebyshev(moments.yw, wDepth.y, minVariance.y);
    // shadowing value
    return min(positive, negative);
}

vec3 Diffuse(Light light, vec3 lightDirection, vec3 normal, vec3 albedo)
{
    float lambertian = clamp(dot(normal, lightDirection), 0.0f, 1.0f);
    return light.diffuse * albedo * lambertian;
}

vec3 CalculateDirectional(Light light, vec3 normal, vec3 position, vec3 albedo)
{
    return Diffuse(light, light.direction, normal, albedo);
}

vec3 CalculatePoint(Light light, vec3 normal, vec3 position, vec3 albedo)
{
    light.direction = light.position - position;
    float d = length(light.direction);
    light.direction = normalize(light.direction);
    float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * d
                    + light.attenuation.quadratic * d * d + 1.0f);

    if(falloff <= 0.0f) return vec3(0.0f);

    return Diffuse(light, light.direction, normal, albedo) * falloff;
}

vec3 CalculateSpot(Light light, vec3 normal, vec3 position, vec3 albedo)
{
    vec3 spotDirection = light.direction;
    light.direction = normalize(light.position - position);
    float cosAngle = dot(-light.direction, spotDirection);

    // outside the cone
    if(cosAngle <= light.angleOuterCone) { return vec3(0.0f); }

    // assuming they are passed as cos(angle)
    float innerMinusOuter = light.angleInnerCone - light.angleOuterCone;
    // spot light factor for smooth transition
    float spotMark = (cosAngle - light.angleOuterCone) / innerMinusOuter;
    float spotFalloff = smoothstep(0.0f, 1.0f, spotMark);

    if(spotFalloff <= 0.0f) return vec3(0.0f);   

    float dst = distance(light.position, position);
    float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * dst
                    + light.attenuation.quadratic * dst * dst + 1.0f);   

    if(falloff <= 0.0f) return vec3(0.0f);

    return Diffuse(light, light.direction, normal, albedo) * falloff * spotFalloff;
}

vec3 CalculateDirectLighting(vec3 position, vec3 normal, vec3 albedo)
{
    // calculate directional lighting
    vec3 directLighting = vec3(0.0f);
	// fixes shadow mapping issues where the center voxel is occluded
	vec3 unitCubeDirection = vec3(clamp(1.7320f * normal, vec3(-1.0f), vec3(1.0f)));
	float visibility = 1.0f;

	if(shadowMapping == 1)
	{
		visibility = Visibility(position + unitCubeDirection * voxelSize);
	}

    // calculate lighting for directional lights
    for(int i = 0; i < lightTypeCount[0]; ++i)
    {
        directLighting += CalculateDirectional(directionalLight[i], normal, position, albedo);

        if(i == 0) { directLighting *= visibility; }
    }

    // calculate lighting for point lights
    for(int i = 0; i < lightTypeCount[1]; ++i)
    {
        directLighting += CalculatePoint(pointLight[i], normal, position, albedo);
    }

    // calculate lighting for spot lights
    for(int i = 0; i < lightTypeCount[2]; ++i) 
    {
        directLighting += CalculateSpot(spotLight[i], normal, position, albedo);
    }

    return directLighting;
}

vec3 VoxelToWorld(ivec3 pos)
{
	vec3 result = vec3(pos);
	result *= voxelSize;

	return result + worldMinPoint;
}

vec4 convRGBA8ToVec4(uint val)
{
    return vec4(float((val & 0x000000FF)), 
    			float((val & 0x0000FF00) >> 8U), 
    			float((val & 0x00FF0000) >> 16U), 
    			float((val & 0xFF000000) >> 24U));
}

vec4 Downsample(layout(rgba8) image3D source, ivec3 pos)
{
	vec4 result = vec4(0.0f);
	vec4 current = vec4(0.0f);
	int count = 0;

	for(int x = -1; x < 2; x++)
	{
		for(int y = -1; y < 2; y++)
		{
			for(int z = -1; z < 2; z++)
			{
				current = imageLoad(source, pos + ivec3(x, y, z));

				if(current.a <= 0) 
				{
					continue;
				}
				else
				{
					count++;
				}

				result += current;
			}
		}
	}

	return count == 0 ? result : result / count;
}

void main()
{
	ivec3 volumeDimension = ivec3(imageSize(voxelRadiance));

	if(gl_GlobalInvocationID.x >= volumeDimension.z ||
		gl_GlobalInvocationID.y >= volumeDimension.z ||
		gl_GlobalInvocationID.z >= volumeDimension.z) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);

	if(writingLowerMip == 0)
	{
		// get r32ui encoded value
		vec4 albedo = imageLoad(voxelAlbedo, writePos);
		// empty voxel
		if(albedo.a <= 0.001f) { return; }

		vec4 normal = imageLoad(voxelNormal, writePos);
		// normal is stored in 0-1 range, restore to -1-1
		normal = normalize(normal * 2.0f - 1.0f);
		// obtain world-space position of the current voxel
		vec3 wsPosition = VoxelToWorld(writePos);
		// calculate direct lighting onto voxel
		albedo.rgb = CalculateDirectLighting(wsPosition, normal.xyz, albedo.rgb);
		albedo.a = 1.0f;

		imageStore(voxelRadiance, writePos, albedo);
	}
	else if(writingLowerMip == 1)
	{
		ivec3 sourcePos = writePos * 2;
		vec4 albedo = Downsample(voxelAlbedo, sourcePos);
		vec4 normal = Downsample(voxelNormal, sourcePos);

		if(albedo.a <= 0.001f) { return; }
		// normal is stored in 0-1 range, restore to -1-1
		normal = normalize(normal * 2.0f - 1.0f);
		// obtain world-space position of the current voxel
		vec3 wsPosition = VoxelToWorld(sourcePos);
		// calculate direct lighting onto voxel
		albedo.rgb = CalculateDirectLighting(wsPosition, normal.xyz, albedo.rgb);
		albedo.a = 1.0f;

		for(int i = 0; i < 6; i++)
		{
			imageStore(voxelRadiance, writePos, albedo);
			writePos.x += volumeDimension.z;
		}
	}
}