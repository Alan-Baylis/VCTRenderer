#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, rgba8) uniform image3D voxelAlbedo;
layout(binding = 1, rgba8) uniform sampler3D voxelTexMipmap;
layout(binding = 2, rgba8) uniform readonly image3D voxelNormal;
layout(binding = 3, rgba8) uniform writeonly image3D voxelComposite;

uvec3 volumeDimension;

const float PI = 3.14159265f;
uniform float maxTracingDistanceGlobal = 1.0f;

const vec3 mipOffset[] = 
{
    vec3(0.0f, 0.0f, 0.0f),
    vec3(1.0f / 6.0f, 0.0f, 0.0f),
    vec3(2.0f / 6.0f, 0.0f, 0.0f),
    vec3( 3.0f / 6.0f, 0.0f, 0.0f),
    vec3(4.0f / 6.0f, 0.0f, 0.0f),
    vec3(5.0f / 6.0f, 0.0f, 0.0f)
};

// four cones
const vec3 propagationDirections[] =
{
    vec3(0.0f, 1.0f, 0.0f),
    vec3(0.0f, 0.5f, 0.866025f),
    vec3(0.754996f, 0.5f, -0.4330128f),
    vec3(-0.754996f, 0.5f, -0.4330128f)
};

// six cones
// const vec3 propagationDirections[] =
// {
//     vec3(0.0f, 1.0f, 0.0f),
//     vec3(0.0f, 0.5f, 0.866025f),
//     vec3(0.823639f, 0.5f, 0.267617f),
//     vec3(0.509037f, 0.5f, -0.7006629f),
//     vec3(-0.50937f, 0.5f, -0.7006629f),
//     vec3(-0.823639f, 0.5f, 0.267617f)
// };

const float diffuseConeWeights[] =
{
    PI / 4.0f,
    3.0f * PI / 20.0f,
    3.0f * PI / 20.0f,
    3.0f * PI / 20.0f,
    3.0f * PI / 20.0f,
    3.0f * PI / 20.0f,
};

vec4 convRGBA8ToVec4(uint val)
{
    return vec4(float((val & 0x000000FF)), 
    float((val & 0x0000FF00) >> 8U), 
    float((val & 0x00FF0000) >> 16U), 
    float((val & 0xFF000000) >> 24U));
}

vec4 TraceCone(vec3 position, vec3 direction, float aperture)
{
    uvec3 visibleFace;
    visibleFace.x = (direction.x < 0.0) ? 0 : 1;
    visibleFace.y = (direction.y < 0.0) ? 2 : 3;
    visibleFace.z = (direction.z < 0.0) ? 4 : 5;
    // weight per axis
    vec3 weight = abs(direction);
    // navigation
    int dimension = int(volumeDimension.x) / 2;
    float voxelSize = 1.0f / dimension;
    // move one voxel further to avoid self collision
    float dst = voxelSize * 2.0f;
    float diameter = aperture * dst;
    vec3 samplePos = direction * dst + position;
    vec3 anisoPos = vec3(samplePos.x / 6.0f, samplePos.yz);
    // control vars
    float mipLevel = 0.0f;
    float anisoLevel = 0.0f;
    float mipMaxLevel = log2(dimension);
    // accumulated sample
    vec4 anisoSample = vec4(0.0f);
    vec4 coneSample = vec4(0.0f);
    vec4 baseColor = vec4(0.0f);

    while(coneSample.a <= 1.0f && dst <= maxTracingDistanceGlobal)
    {
        // outisde bounds
        if (aperture < 0.3f && (samplePos.x < 0.0f || samplePos.y < 0.0f || samplePos.z < 0.0f
            || samplePos.x > 1.0f || samplePos.y > 1.0f || samplePos.z > 1.0f)) 
        { 
            break; 
        }

        mipLevel = clamp(log2(diameter * dimension), 0.0f, mipMaxLevel);
        // aniso sampling
        anisoSample = weight.x * textureLod(voxelTexMipmap, anisoPos + mipOffset[visibleFace.x], mipLevel + 1.0f)
                    + weight.y * textureLod(voxelTexMipmap, anisoPos + mipOffset[visibleFace.y], mipLevel + 1.0f)
                    + weight.z * textureLod(voxelTexMipmap, anisoPos + mipOffset[visibleFace.z], mipLevel + 1.0f);

       if(mipLevel <= 1.0f)
        {
            baseColor = texture(voxelTexMipmap, anisoPos);
            anisoSample = mix(baseColor, anisoSample, clamp(mipLevel, 0.0f, 1.0f));
        }
        // accumulate sampling
        coneSample += (1.0f - coneSample.a) * anisoSample;
        // move further into volume
        dst += max(diameter, voxelSize);
        diameter = dst * aperture;
        samplePos = direction * dst + position;
        anisoPos = vec3(samplePos.x / 6.0f, samplePos.yz);
    }

    return coneSample;
}

vec4 CalculateIndirectLighting(vec3 position, vec3 normal)
{
    vec4 diffuseTrace = vec4(0.0f);

    // diffuse cone setup
    float aperture = 0.8425f;
    vec3 up = (normal.y * normal.y) > 0.95f ? vec3(0.0f, 0.0f, 1.0f) : vec3(0.0f, 1.0f, 0.0f);
    vec3 right = cross(normal, up);
    up = cross(normal, right);

    for(int i = 0; i < 4; i++)
    {
        vec3 coneDirection = normal;
        coneDirection += propagationDirections[i].x * right + propagationDirections[i].z * up;
        coneDirection = normalize(coneDirection);

        diffuseTrace += TraceCone(position, coneDirection, aperture) * diffuseConeWeights[i];
    }

    return clamp(diffuseTrace, 0.0f, 1.0f);
}

void main()
{
    volumeDimension = imageSize(voxelAlbedo);

    if(gl_GlobalInvocationID.x >= volumeDimension.z ||
        gl_GlobalInvocationID.y >= volumeDimension.z ||
        gl_GlobalInvocationID.z >= volumeDimension.z) return;

    ivec3 sourcePosition = ivec3(gl_GlobalInvocationID);
    ivec3 mipPosition = sourcePosition / 2;
    vec4 albedo = imageLoad(voxelAlbedo, sourcePosition);

    if(albedo.a <= 0) { return; }

    vec4 injectionPass = texelFetch(voxelTexMipmap, mipPosition, 0);
    // normal from voxelization
    vec4 normal = imageLoad(voxelNormal, sourcePosition);
    // normal is stored in 0-1 range, restore to -1 -> -1
    normal = normalize(normal * 2.0f - 1.0f);
    vec3 samplePos = mipPosition / (volumeDimension.z / 2.0f);
    // calculate indirect lighting - first bounce onto the voxel texture
    vec4 indirectLighting = CalculateIndirectLighting(samplePos, normal.xyz);
    // first bounce gi component only
    vec4 firstBounce = indirectLighting * albedo;
    // first bounce + direct lighting
    vec4 radiance = injectionPass + firstBounce;
    radiance.a = 1.0f;

    imageStore(voxelComposite, sourcePosition, clamp(radiance, 0.0f, 1.0f));
}